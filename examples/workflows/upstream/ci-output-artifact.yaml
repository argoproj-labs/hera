apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ci-output-artifact-
spec:
  entrypoint: ci-example
  templates:
  - name: build-golang-example
    container:
      image: golang:1.8
      args:
      - ' cd /go/src/github.com/golang/example/hello && go build -v . '
      command:
      - sh
      - -c
      volumeMounts:
      - name: workdir
        mountPath: /go
    inputs:
      artifacts:
      - name: code
        path: /go/src/github.com/golang/example
        git:
          repo: https://github.com/golang/example.git
          revision: cfe12d6
  - name: run-hello
    container:
      image: '{{inputs.parameters.os-image}}'
      args:
      - ' uname -a ; cat /etc/os-release ; /go/src/github.com/golang/example/hello/hello '
      command:
      - sh
      - -c
      volumeMounts:
      - name: workdir
        mountPath: /go
    inputs:
      parameters:
      - name: os-image
  - name: release-artifact
    container:
      image: alpine:3.8
      volumeMounts:
      - name: workdir
        mountPath: /go
    outputs:
      artifacts:
      - name: release
        path: /go
  - name: ci-example
    steps:
    - - name: build
        template: build-golang-example
    - - name: test
        template: run-hello
        withItems:
        - image: debian
          tag: '9.1'
        - image: alpine
          tag: '3.6'
        - image: ubuntu
          tag: '17.10'
        arguments:
          parameters:
          - name: os-image
            value: '{{item.image}}:{{item.tag}}'
    - - name: release
        template: release-artifact
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
