from hera.workflows import Container, Script, Step, Steps, Workflow
from hera.workflows.models import (
    Arguments,
    Cache,
    ConfigMapKeySelector,
    Inputs,
    Memoize,
    Outputs,
    Parameter,
    ValueFrom,
)

with Workflow(
    arguments=Arguments(
        parameters=[
            Parameter(
                name="num",
                value="5",
            )
        ],
    ),
    api_version="argoproj.io/v1alpha1",
    kind="Workflow",
    annotations={
        "workflows.argoproj.io/description": "This example demonstrates fibonacci sequence problem using conditional parameter feature.\n",
        "workflows.argoproj.io/veriiony": ">= 3.1.0",
    },
    generate_name="fibonacci-",
    entrypoint="main",
) as w:
    with Steps(
        name="main",
    ) as invocator:
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="num",
                        value="{{workflow.parameters.num}}",
                    )
                ],
            ),
            name="fibonaccimain",
            template="fibonacci",
        )
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="result",
                        value="{{steps.fibonaccimain.outputs.parameters.fib}}",
                    )
                ],
            ),
            name="printresult",
            template="printresult",
        )
    with Steps(
        inputs=Inputs(
            parameters=[
                Parameter(
                    name="num",
                )
            ],
        ),
        memoize=Memoize(
            cache=Cache(
                config_map=ConfigMapKeySelector(
                    key="fibonacci-cache",
                    name="fibonacci-m",
                ),
            ),
            key="{{inputs.parameters.num}}",
            max_age="120s",
        ),
        name="fibonacci",
        outputs=Outputs(
            parameters=[
                Parameter(
                    name="fib",
                    value_from=ValueFrom(
                        expression="asInt(inputs.parameters.num) == 1? 1: asInt(inputs.parameters.num) == 2? 1: steps['fibonacci-helper'].outputs.parameters.result",
                    ),
                )
            ],
        ),
    ) as invocator:
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="num-1",
                        value="{{inputs.parameters.num}}",
                    )
                ],
            ),
            name="fibonacci-helper",
            template="fibonaccihelper",
            when="{{inputs.parameters.num}} != 1 && {{inputs.parameters.num}} != 2",
        )
    with Steps(
        inputs=Inputs(
            parameters=[
                Parameter(
                    name="num-1",
                )
            ],
        ),
        name="fibonaccihelper",
        outputs=Outputs(
            parameters=[
                Parameter(
                    name="result",
                    value_from=ValueFrom(
                        parameter="{{steps.add.outputs.result}}",
                    ),
                )
            ],
        ),
    ) as invocator:
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="a",
                        value="{{inputs.parameters.num-1}}",
                    ),
                    Parameter(
                        name="op",
                        value="-",
                    ),
                    Parameter(
                        name="b",
                        value="1",
                    ),
                ],
            ),
            name="sub-1",
            template="do-math",
        )
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="a",
                        value="{{inputs.parameters.num-1}}",
                    ),
                    Parameter(
                        name="op",
                        value="-",
                    ),
                    Parameter(
                        name="b",
                        value="2",
                    ),
                ],
            ),
            name="sub-2",
            template="do-math",
            when="{{inputs.parameters.num-1}} != 1 && {{inputs.parameters.num-1}} != 2",
        )
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="num",
                        value="{{steps.sub-1.outputs.result}}",
                    )
                ],
            ),
            name="fib-sub-1",
            template="fibonacci",
        )
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="num",
                        value="{{steps.sub-2.outputs.result}}",
                    )
                ],
            ),
            name="fib-sub-2",
            template="fibonacci",
        )
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="a",
                        value="{{steps.fib-sub-1.outputs.parameters.fib}}",
                    ),
                    Parameter(
                        name="op",
                        value="+",
                    ),
                    Parameter(
                        name="b",
                        value="{{steps.fib-sub-2.outputs.parameters.fib}}",
                    ),
                ],
            ),
            name="add",
            template="do-math",
        )
    Script(
        name="return-1",
        command=["python"],
        image="python:alpine3.6",
        source="print(1)",
    )
    Script(
        inputs=Inputs(
            parameters=[
                Parameter(
                    name="a",
                ),
                Parameter(
                    name="op",
                ),
                Parameter(
                    name="b",
                ),
            ],
        ),
        name="do-math",
        command=["python"],
        image="python:alpine3.6",
        source="print({{inputs.parameters.a}} {{inputs.parameters.op}} {{inputs.parameters.b}})\n",
    )
    Container(
        inputs=Inputs(
            parameters=[
                Parameter(
                    name="result",
                )
            ],
        ),
        name="printresult",
        args=["echo {{inputs.parameters.result}}"],
        command=["sh", "-c"],
        image="alpine:latest",
    )
