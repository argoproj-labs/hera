from hera.workflows import Container, Script, Step, Steps, Workflow
from hera.workflows.models import (
    Arguments,
    Artifact,
    Inputs,
    IntOrString,
    ObjectMeta,
    Outputs,
    Parameter,
    PersistentVolumeClaim,
    PersistentVolumeClaimSpec,
    Quantity,
    S3Artifact,
    SecretKeySelector,
    Sequence,
    VolumeMount,
    VolumeResourceRequirements,
)

with Workflow(
    api_version="argoproj.io/v1alpha1",
    kind="Workflow",
    generate_name="work-avoidance-",
    entrypoint="main",
    on_exit="save-markers",
    volume_claim_templates=[
        PersistentVolumeClaim(
            metadata=ObjectMeta(
                name="work",
            ),
            spec=PersistentVolumeClaimSpec(
                access_modes=["ReadWriteOnce"],
                resources=VolumeResourceRequirements(
                    requests={
                        "storage": Quantity(
                            __root__="10Mi",
                        )
                    },
                ),
            ),
        )
    ],
) as w:
    with Steps(
        name="main",
    ) as invocator:
        Step(
            name="load-markers",
            template="load-markers",
        )
        Step(
            arguments=Arguments(
                parameters=[
                    Parameter(
                        name="num",
                        value="{{item}}",
                    )
                ],
            ),
            name="echo",
            template="echo",
            with_sequence=Sequence(
                count=IntOrString(
                    __root__="3",
                ),
            ),
        )
    Container(
        inputs=Inputs(
            artifacts=[
                Artifact(
                    name="markers",
                    optional=True,
                    path="/work/markers",
                    s3=S3Artifact(
                        access_key_secret=SecretKeySelector(
                            key="accesskey",
                            name="my-minio-cred",
                        ),
                        bucket="my-bucket",
                        endpoint="minio:9000",
                        insecure=True,
                        key="work-avoidance-markers",
                        secret_key_secret=SecretKeySelector(
                            key="secretkey",
                            name="my-minio-cred",
                        ),
                    ),
                )
            ],
        ),
        name="load-markers",
        command=["mkdir", "-p", "/work/markers"],
        image="busybox",
        volume_mounts=[
            VolumeMount(
                mount_path="/work",
                name="work",
            )
        ],
    )
    Script(
        inputs=Inputs(
            parameters=[
                Parameter(
                    name="num",
                )
            ],
        ),
        name="echo",
        command=["sh", "-eux"],
        image="busybox",
        source='marker=/work/markers/$(date +%Y-%m-%d)-echo-{{inputs.parameters.num}}\nif [ -e  ${marker} ]; then\n  echo "work already done"\n  exit 0\nfi\necho "working very hard"\n# toss a virtual coin and exit 1 if 1\nif [ $(($(($RANDOM%10))%2)) -eq 1 ]; then\n  echo "oh no!"\n  exit 1\nfi\ntouch ${marker}\n',
        volume_mounts=[
            VolumeMount(
                mount_path="/work",
                name="work",
            )
        ],
    )
    Container(
        name="save-markers",
        outputs=Outputs(
            artifacts=[
                Artifact(
                    name="markers",
                    path="/work/markers",
                    s3=S3Artifact(
                        access_key_secret=SecretKeySelector(
                            key="accesskey",
                            name="my-minio-cred",
                        ),
                        bucket="my-bucket",
                        endpoint="minio:9000",
                        insecure=True,
                        key="work-avoidance-markers",
                        secret_key_secret=SecretKeySelector(
                            key="secretkey",
                            name="my-minio-cred",
                        ),
                    ),
                )
            ],
        ),
        command=["true"],
        image="busybox",
        volume_mounts=[
            VolumeMount(
                mount_path="/work",
                name="work",
            )
        ],
    )
