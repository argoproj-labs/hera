apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: parameters-workflow-
spec:
  entrypoint: worker
  templates:
  - name: setup
    outputs:
      parameters:
      - name: environment_parameter
        valueFrom:
          path: /tmp/hera-outputs/parameters/environment_parameter
      - name: an_annotated_parameter
        description: infer name from field
        valueFrom:
          path: /tmp/hera-outputs/parameters/an_annotated_parameter
      - name: setup-config
        valueFrom:
          path: /tmp/hera-outputs/parameters/setup-config
    script:
      image: python:3.9
      source: '{{inputs.parameters}}'
      args:
      - -m
      - hera.workflows.runner
      - -e
      - examples.workflows.experimental.new_dag_decorator_params:setup
      command:
      - python
      env:
      - name: hera__outputs_directory
        value: /tmp/hera-outputs
      - name: hera__script_pydantic_io
        value: ''
  - name: concat
    inputs:
      parameters:
      - name: word_a
        default: ''
      - name: word_b
      - name: concat_config
        default: '{"reverse": false}'
    script:
      image: python:3.9
      source: '{{inputs.parameters}}'
      args:
      - -m
      - hera.workflows.runner
      - -e
      - examples.workflows.experimental.new_dag_decorator_params:concat
      command:
      - python
      env:
      - name: hera__outputs_directory
        value: /tmp/hera-outputs
      - name: hera__script_pydantic_io
        value: ''
  - name: worker
    dag:
      tasks:
      - name: setup-task
        template: setup
      - name: task-a
        depends: setup-task
        template: concat
        arguments:
          parameters:
          - name: word_a
            value: '{{inputs.parameters.value_a}}'
          - name: word_b
            value: '{{tasks.setup-task.outputs.parameters.environment_parameter}}{{tasks.setup-task.outputs.parameters.an_annotated_parameter}}'
          - name: concat_config
            value: '{"reverse": false}'
      - name: task-b
        depends: setup-task
        template: concat
        arguments:
          parameters:
          - name: word_a
            value: '{{inputs.parameters.value_b}}'
          - name: word_b
            value: '{{tasks.setup-task.outputs.result}}'
          - name: concat_config
            value: '{"reverse": false}'
      - name: final-task
        depends: task-a && task-b
        template: concat
        arguments:
          parameters:
          - name: word_a
            value: '{{tasks.task-a.outputs.result}}'
          - name: word_b
            value: '{{tasks.task-b.outputs.result}}'
          - name: concat_config
            value: '{"reverse": false}'
    inputs:
      parameters:
      - name: value_a
        default: my default
      - name: value_b
      - name: an_int_value
        default: '42'
      - name: a_basemodel
        default: '{"param_1": "Hello", "param_2": "world"}'
    outputs:
      parameters:
      - name: result_value
        valueFrom:
          parameter: '{{tasks.final-task.outputs.result}}'
      - name: another_value
        valueFrom:
          parameter: '{{tasks.setup-task.outputs.parameters.an_annotated_parameter}}'
  arguments:
    parameters:
    - name: value_b
      value: a value for b!
