apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: my-workflow-
spec:
  entrypoint: outer-dag
  templates:
  - name: setup
    outputs:
      parameters:
      - name: environment_parameter
        valueFrom:
          path: /tmp/hera-outputs/parameters/environment_parameter
    script:
      args:
      - -m
      - hera.workflows.runner
      - -e
      - examples.workflows.experimental.new_dag_decorator_inner_dag:setup
      command:
      - python
      env:
      - name: hera__outputs_directory
        value: /tmp/hera-outputs
      - name: hera__script_pydantic_io
        value: ''
      image: python:3.9
      source: '{{inputs.parameters}}'
  - inputs:
      parameters:
      - name: word_a
      - name: word_b
    name: concat
    script:
      args:
      - -m
      - hera.workflows.runner
      - -e
      - examples.workflows.experimental.new_dag_decorator_inner_dag:concat
      command:
      - python
      env:
      - name: hera__outputs_directory
        value: /tmp/hera-outputs
      - name: hera__script_pydantic_io
        value: ''
      image: python:3.9
      source: '{{inputs.parameters}}'
  - dag:
      tasks:
      - name: setup-task
        template: setup
      - arguments:
          parameters:
          - name: word_a
            value: '{{inputs.parameters.value_a}}'
          - name: word_b
            value: '{{tasks.setup-task.outputs.parameters.environment_parameter}}'
        depends: setup-task
        name: task-a
        template: concat
      - arguments:
          parameters:
          - name: word_a
            value: '{{inputs.parameters.value_b}}'
          - name: word_b
            value: '{{tasks.setup-task.outputs.result}}'
        depends: setup-task
        name: task-b
        template: concat
      - arguments:
          parameters:
          - name: word_a
            value: '{{tasks.task-a.outputs.result}}'
          - name: word_b
            value: '{{tasks.task-b.outputs.result}}'
        depends: task-a && task-b
        name: final-task
        template: concat
    inputs:
      parameters:
      - name: value_a
      - name: value_b
    name: worker
    outputs:
      parameters:
      - name: value
        valueFrom:
          parameter: '{{tasks.final-task.outputs.result}}'
  - dag:
      tasks:
      - arguments:
          parameters:
          - name: value_a
            value: dag_a
          - name: value_b
            value: '{{inputs.parameters.value_a}}'
        name: sub-dag-a
        template: worker
      - arguments:
          parameters:
          - name: value_a
            value: dag_b
          - name: value_b
            value: '{{inputs.parameters.value_b}}'
        name: sub-dag-b
        template: worker
      - arguments:
          parameters:
          - name: value_a
            value: '{{tasks.sub-dag-a.outputs.parameters.value}}'
          - name: value_b
            value: '{{tasks.sub-dag-b.outputs.parameters.value}}'
        depends: sub-dag-a && sub-dag-b
        name: sub-dag-c
        template: worker
    inputs:
      parameters:
      - name: value_a
      - name: value_b
    name: outer-dag
    outputs:
      parameters:
      - name: value
        valueFrom:
          parameter: '{{tasks.sub-dag-c.outputs.parameters.value}}'
