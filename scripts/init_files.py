"""A script that constructs Hera's main init files that supports importing all the Hera models."""
import importlib
import inspect
import pkgutil
import sys
from pathlib import Path

import hera.workflows as hera_workflows

workflow_modules = [
    name
    for _, name, _ in pkgutil.iter_modules(hera_workflows.__path__)
    if name != "models" and not name.startswith("_")
]
"""collection of all the curated Hera models that are maintained manually."""

autogen_modules = inspect.getmembers(sys.modules["hera.workflows.models"], inspect.isclass)
"""collection of all the autogenerated Hera models."""

header = '''
"""Hera classes.

[DO NOT EDIT MANUALLY]
Auto-generated by Hera via `make init-files`. In order to add objects to the hera.workflows namespace
add them to the __all__ list in the relevant module. Hera submodules should not use `from hera.workflows import X`
themselves, as it introduces a circular dependency.
"""
'''

hera_workflows_init = Path(hera_workflows.__file__)

exports = []
"""collection of all the classes that will be added to the `hera.workflows.__init__` to support importing."""

outputs = [header]
"""collection of strings that are used as the actual outputs of the `hera.workflows.__init__` file."""

for module_name in workflow_modules:
    module = importlib.import_module(f"hera.workflows.{module_name}")
    for export in getattr(module, "__all__", []):
        if export in exports:
            raise ValueError(f"Duplicate export {export}")
        exports.append(export)
        outputs.append(f"from hera.workflows.{module_name} import {export}")

for module_name, module in autogen_modules:
    if module_name in exports or "io.argoproj.events" in module.__module__:
        continue

    outputs.append(f"from hera.workflows.models import {module_name}")
    exports.append(module_name)

outputs.append(f"__all__ = {repr(list(sorted(exports)))}")

hera_workflows_init.write_text("\n".join(outputs))
