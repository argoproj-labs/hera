name: hera cicd

on:
  push:
    branches:
      - main
  pull_request: { }

jobs:
  test:
    name: build + test py${{ matrix.python-version }} on ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    env:
      PYVER: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: checkout
        uses: actions/checkout@v2

      - name: install base dependencies
        run: |
          python -m pip install --upgrade "tox<4.0" tox-wheel twine

      - name: lint
        env:
          TOXENV: lint
        run: |
          tox

      - name: typecheck
        env:
          TOXENV: typecheck
        run: |
          tox

      - name: tests
        env:
          ENABLE_BDIST_EXT_MODULE: 'yes'
          TOXENV: python${{ matrix.python-version }}
        run: |
          tox

      - name: twine check
        run: |
          twine check .tox/dist/*

# TODO: wheels for linux_x86_64 cannot be uploaded. Rather, this needs manylinux distributions, which can be installed
# TODO: via cibuildwheel
#      - name: upload build artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: pypi-build-arts
#          path: .tox/dist

      - name: upload coverage files
        uses: actions/upload-artifact@v2
        with:
          name: coverage-data
          path: ".tox/.coverage.*"

  build-py3-none-any:
    name: build py3-none-any on linux
    timeout-minutes: 10

    runs-on: ubuntu-latest

    steps:
      - name: setup python3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install base dependencies
        run: |
          python -m pip install --upgrade build twine

      - name: build sdist and wheel ( no test )
        run: |
          python -m build --sdist --wheel

      - name: list artifacts
        run: |
          ls -l dist

      - name: twine check
        run: |
          twine check dist/*

      - name: upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pypi-build-arts
          path: dist

  coverage:
    needs: [ test ]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: setup python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: download coverage files
        uses: actions/download-artifact@v2
        with:
          name: coverage-data
          path: .tox

      - name: list coverage files
        run: |
          find .tox -name ".coverage.*"

      - name: install tox
        run: |
          python -m pip install --upgrade tox

      - name: create coverage report
        env:
          TOXENV: coverage
        run: |
          tox

      - name: upload coverage HTML report
        uses: actions/upload-artifact@v2
        with:
          name: html-report
          path: .tox/htmlcov

  publish:
    needs: [ coverage, test, build-py3-none-any ]
    if: success() && ( github.ref == 'refs/heads/main' )
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: setup python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: get distribution wheels
        uses: actions/download-artifact@v2
        with:
          name: pypi-build-arts
          path: dist

      - name: list all pypi build arts
        run: |
          ls -la dist/

      - name: install check dependencies
        run: |
          python -m pip install --upgrade twine

      - name: check pypi artifacts
        run: |
          twine check dist/*

      - name: publish package to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          skip_existing: true
